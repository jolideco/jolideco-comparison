# Main entrypoint of the workflow. 
# Please follow the best practices: 
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there. 

import yaml
from pathlib import Path
from astropy.io import fits

report: "report/workflow.rst"

configfile : "config/config.yaml"

envvars:
    "JOLIDECO_GMM_LIBRARY"

INSTRUMENTS = {
    "chandra": ["chandra"],
    "xmm": ["xmm"],
    "joint": ["chandra", "xmm"],
}

DATA_PATH = {
    "chandra": "",  # "chandra_gauss_fwhm4710_128x128",
    "xmm": "",  # "xmm_gauss_fwhm14130_128x128",
}

FILE_PATTERN_CHANDRA = {
    "counts": "chandra_gauss_fwhm4710_128x128_sim0*_{bkg_level}_{name}_iter*.fits",
    "psf": "chandra_gauss_fwhm4710_128x128_psf_33x33.fits",
    "flux": "chandra_gauss_fwhm4710_128x128_mod0*{name}.fits",
    "npred": "chandra_gauss_fwhm4710_128x128_img0*{name}.fits",
}

FILE_PATTERN_XMM = {
    "counts": "xmm_gauss_fwhm14130_128x128_sim0*_{bkg_level}_{name}_iter*.fits",
    "psf": "xmm_gauss_fwhm14130_128x128_psf_63x63.fits",
    "flux": "xmm_gauss_fwhm14130_128x128_mod0*{name}.fits",
    "npred": "xmm_gauss_fwhm14130_128x128_img0*{name}.fits",
}

FILE_PATTERN = {
    "chandra": FILE_PATTERN_CHANDRA,
    "xmm": FILE_PATTERN_XMM,
}

def get_max_values(pattern="*_mod*_*.fits"):
    """Get max values"""
    data_path = Path("data/")
    
    max_values = {}

    for filename in sorted(data_path.glob(pattern)):
        data = fits.getdata(filename)
        key = filename.stem.split("_")[-1]
        max_values[key] = data.max()
    
    return max_values


def get_group_idx(name):
    """Get group index"""
    if "disk" in name:
        return 2
    elif "spiral" in name:
        return 3
    elif "point" in name:
        return 1
    elif "aster" in name:
        return 0
    else:
        raise ValueError(f"Invalid source name: {name}")


def get_filenames(instrument, bkg_level, name, quantity="counts"):
    """Find files"""
    path = Path(f"data") / DATA_PATH[instrument]

    # group_idx = get_group_idx(name=name)
    pattern = FILE_PATTERN[instrument][quantity].format(
        bkg_level=bkg_level,
        name=name,
    )
    return list(path.glob(pattern))


def get_datasets_filenames(wildcards):
    """Get datasets filenames"""
    prefix, bkg_level, scenario = wildcards.prefix, wildcards.bkg_level, wildcards.scenario
    
    filenames_all = {
        "counts": [],
        "psf": [],
    }

    for instrument in INSTRUMENTS[prefix]:
        filenames = get_filenames(
            instrument=instrument, bkg_level=bkg_level, name=scenario, quantity="counts"
        )
        filenames_all["counts"].extend(filenames)  

        filename_psf = get_filenames(
            instrument=instrument, bkg_level=bkg_level, name=scenario, quantity="psf"
        )
        filenames_all["psf"].extend(filename_psf * len(filenames))

    return filenames_all  


MAX_VALUES = get_max_values()
MAX_VALUES_NPRED = get_max_values(pattern="*_img*_*.fits")

with Path("config/template.yaml").open("r") as f:
    config_template = yaml.safe_load(f)

config["methods"] = [_["name"] for _ in config_template["runs"]]

include: "rules/init-config.smk"
include: "rules/run-comparison.smk"
include: "rules/plot-results.smk"
include: "rules/plot-datasets.smk"
include: "rules/plot-flux-true.smk"
include: "rules/site-render-summary.smk"
include: "rules/site-render-index.smk"
include: "rules/site-build.smk"

# all rule 
rule all:
    input:
        expand("results/{scenario}/{bkg_level}/{prefix}/{method}/images/flux.png", scenario=config["scenarios"], bkg_level=config["bkg_levels"], prefix=config["prefixes"], method=config["methods"]),
        "site/index.html"
